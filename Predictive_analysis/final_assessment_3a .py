# -*- coding: utf-8 -*-
"""Final_assessment-3A.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cL8xOiMujsQd6el07JCgqWT3mcs5FFLn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.cluster import KMeans

df=pd.read_csv('/content/customer_segmentation.csv')
df

df.isna().sum()

df['Income']=df['Income'].fillna(df['Income'].mode()[0])

df.isna().sum()

df.duplicated().sum()

df.info()

def outliers_iqr(data):
    q1 = np.percentile(data, 25)
    q3 = np.percentile(data, 75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in data if x < lower_bound or x > upper_bound]
    return outliers
numerical_columns = df.select_dtypes(include=[np.number])
outliers_dict = {}
for col in numerical_columns.columns:
    outliers_dict[col] = outliers_iqr(df[col])
for col, outliers in outliers_dict.items():
    print("Outliers in column '{}': {}".format(col, outliers))

le=LabelEncoder()
for i in df.select_dtypes(include='object').columns:
  df[i]=le.fit_transform(df[i])

df

scaler=StandardScaler()
x=df.drop('ID',axis=1)
df_1=pd.DataFrame(scaler.fit_transform(x),columns=x.columns)

kmeans=KMeans(n_clusters=3,init='k-means++')
y_pred=kmeans.fit_predict(df_1)
df_1['Cluster']=y_pred

print(df[['ID','Cluster']])
print(kmeans.cluster_centers_)
df1=df_1[df_1.Cluster==0]
df2=df_1[df_1.Cluster==1]
df3=df_1[df_1.Cluster==2]
plt.scatter(df1['Income'],df1['Recency'],color='green')
plt.scatter(df2['Income'],df2['Recency'],color='red')
plt.scatter(df3['Income'],df3['Recency'],color='black')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Income')
plt.ylabel('Recency')
plt.legend()
plt.show()

from sklearn.metrics import silhouette_score
sse = []
sil_score=[]
k_nrg=range(1,10)
for k in range(1,10):
   kmeans = KMeans(n_clusters=k)
   kmeans.fit(df_1)
   sse.append(kmeans.inertia_)
   if k>=2:
    x=silhouette_score(df_1, kmeans.fit_predict(df_1))
    sil_score.append(x)
plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(sse)
plt.show()
plt.xlabel('K')
plt.ylabel('Silhouette Score')
plt.plot(range(2,10),sil_score,color='red')
plt.show()









