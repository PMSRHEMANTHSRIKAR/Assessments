# -*- coding: utf-8 -*-
"""Question-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kdhb9Mf6piZL0sBfRbySzQmXLsh4YBUT
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.metrics import accuracy_score,r2_score,precision_score,recall_score,confusion_matrix,f1_score,mean_absolute_error,mean_squared_error,silhouette_score
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/Credit Card Customer Data.csv')
df

df.info()

df.describe()

#checking for null values
df.isna().sum()

df.shape

# Plot histograms for numerical columns
for i in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[i])
    plt.title(f'Histogram of {i}')
    plt.xlabel(i)
    plt.ylabel('Frequency')
    plt.show()

#as there are no categorial data there is no need for bar plot of categorical data



for i in df.select_dtypes(include=['int64','float64']).columns:
  df[i]=df[i].fillna(df[i].mean())

df.isna().sum()

df.duplicated().sum()

df.shape

# Compute the correlation matrix for numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix.to_string())

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f")
plt.title('Heatmap of Correlation Matrix')
plt.show()

#check for outliers
for c in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x=df[c])

#Outlier Handling
for c in df.select_dtypes(include=['int64','float64']).columns:
  q1 = df[c].quantile(0.25)
  q3 = df[c].quantile(0.75)
  iqr = q3-q1
  lwr = q1-1.5*iqr
  upr = q3+1.5*iqr
  df.loc[df[c]>upr,c]=upr
  df.loc[df[c]<lwr,c]=lwr

#checking again for outliers
for c in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x=df[c])

#encoding
le=LabelEncoder()
for i in df.select_dtypes(include='object').columns:
  df[i]=le.fit_transform(df[i])

df.info()

#scaling for clustering
scaler=StandardScaler()
x=df.drop(columns=['Sl_No','Customer Key'])
df_1=pd.DataFrame(scaler.fit_transform(x),columns=x.columns)

from sklearn.metrics import silhouette_score
sse = []
sil_score=[]
k_nrg=range(2,11)
for k in k_nrg:
   kmeans = KMeans(n_clusters=k)
   kmeans.fit(df_1)
   sse.append(kmeans.inertia_)
   x=silhouette_score(df_1, kmeans.labels_)
   sil_score.append(x)
plt.xlabel('K')
plt.ylabel('Sum of squared error')
plt.plot(range(2,11),sse,color='blue')
plt.show()
plt.xlabel('K')
plt.ylabel('Silhouette Score')
plt.plot(range(2,11),sil_score,color='red')
plt.show()

kmeans=KMeans(n_clusters=3,init='k-means++')
y_pred=kmeans.fit_predict(df_1)
df_1['Cluster']=y_pred
df['Cluster']=y_pred

print(kmeans.cluster_centers_)

df1=df_1[df_1.Cluster==0]
df2=df_1[df_1.Cluster==1]
df3=df_1[df_1.Cluster==2]
plt.scatter(df1['Avg_Credit_Limit'],df1['Total_Credit_Cards'],color='green')
plt.scatter(df2['Avg_Credit_Limit'],df2['Total_Credit_Cards'],color='red')
plt.scatter(df3['Avg_Credit_Limit'],df3['Total_Credit_Cards'],color='black')
plt.scatter(kmeans.cluster_centers_[:,0],kmeans.cluster_centers_[:,1],color='purple',marker='*',label='centroid')
plt.xlabel('Avg_Credit_Limit')
plt.ylabel('Total_Credit_Cards')
plt.legend()
plt.show()

ss=silhouette_score(df,kmeans.labels_)
print(ss)

for i in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x='Cluster',y=i,data=df)
  plt.show()


print(df1.describe().to_string())
print(df2.describe().to_string())
print(df3.describe().to_string())

df1#cluster-1

df2#cluster-2

df3#cluster-3

# By this model customers can be segmented based on total credit card taken and credit limit