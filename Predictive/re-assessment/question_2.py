# -*- coding: utf-8 -*-
"""Question-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mVqYsoIAvtCeoTyCKkySS2pBFvwqNHKr
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.cluster import KMeans
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import IsolationForest
from sklearn.cluster import DBSCAN
from sklearn.metrics import accuracy_score,r2_score,precision_score,recall_score,confusion_matrix,f1_score,mean_absolute_error,mean_squared_error,silhouette_score
import warnings
warnings.filterwarnings('ignore')

df=pd.read_csv('/content/mushroom.csv')
df

df.info()

#Checking for null values
df.isna().sum()

df.describe()

df.shape

# Plot histograms for numerical columns
for i in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure(figsize=(10, 5))
    sns.histplot(df[i])
    plt.title(f'Histogram of {i}')
    plt.xlabel(i)
    plt.ylabel('Frequency')
    plt.show()

#as there are no categorial data there is no need for bar plot of categorical data

df.duplicated().sum()

df=df.drop_duplicates()

df.shape

# Compute the correlation matrix for numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix.to_string())

# Plot the correlation matrix as a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f")
plt.title('Heatmap of Correlation Matrix')
plt.show()

# Generate scatter plots for pairs of numerical variables
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
for i in range(len(numerical_columns)):
    for j in range(i + 1, len(numerical_columns)):
        plt.figure(figsize=(10, 6))
        sns.scatterplot(data=df, x=numerical_columns[i], y=numerical_columns[j])
        plt.title(f'Scatter Plot between {numerical_columns[i]} and {numerical_columns[j]}')
        plt.show()

#null handling
for i in df.select_dtypes(include=['int64','float64']).columns:
  df[i]=df[i].fillna(df[i].mean())

#check for outliers
for c in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x=df[c])

#Outlier Handling
for c in df.select_dtypes(include=['int64','float64']).columns:
  q1 = df[c].quantile(0.25)
  q3 = df[c].quantile(0.75)
  iqr = q3-q1
  lwr = q1-1.5*iqr
  upr = q3+1.5*iqr
  df.loc[df[c]>upr,c]=upr
  df.loc[df[c]<lwr,c]=lwr

#checking again for outliers
for c in df.select_dtypes(include=['int64','float64']).columns:
  plt.figure(figsize=(10,5))
  sns.boxplot(x=df[c])

le=LabelEncoder()
for i in df.select_dtypes(include='object').columns:
  df[i]=le.fit_transform(df[i])

df

X=df.drop(columns='class')
y=df['class']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

scaler=StandardScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.transform(X_test)

model = RandomForestClassifier()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)

conf = confusion_matrix(y_test,y_pred)
F1 = f1_score(y_test,y_pred)
print("Metrics for RandomForestClassifier Model")
print("Accuracy Score: ", accuracy)
print("recall Score: ", recall)
print("precision Score: ", precision)

print("Confusion Matrix: ", conf)

model = LogisticRegression()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test,y_pred)
recall = recall_score(y_test,y_pred)
precision = precision_score(y_test,y_pred)

conf = confusion_matrix(y_test,y_pred)
F1 = f1_score(y_test,y_pred)

print("Metrics for LogisticRegression Model")
print("Accuracy Score: ", accuracy)
print("recall Score: ", recall)
print("precision Score: ", precision)
print("Confusion Matrix: ", conf)

# By this we can classify the mushroom which is edible and which is not edible.